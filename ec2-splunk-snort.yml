---
- name: Provision an EC2 Instance for Splunk
  hosts: localhost
  connection: local
  gather_facts: False
  tags: ec2-splunk,splunk
  vars:
    instance_type: t2.micro
    security_group: ansible-splunk
    sec_grp_in:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8000
        to_port: 8000
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 8088
        to_port: 8088
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 443
        to_port: 443
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 514
        to_port: 514
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 1514
        to_port: 1514
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 2514
        to_port: 2514
        cidr_ip: 0.0.0.0/0
    image: ami-7c4f7097 # ami-432e2fa8 CIS Amazon Linux Benchmark v2.0.0 - Level 1 - for further testing
    region: eu-central-1
    count: 1
    ec2tag: splunk-docker
    inventory_group: splunk
  roles:
    - ansible-ec2-instance

- name: Installing Splunk Service as Container - Onboarding rsyslog and hec clients
  hosts: splunk
  become: true
  remote_user: ec2-user
  tags: splunk-vm,splunk
  pre_tasks:
    - name: Configure password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication yes'
      register: configsshd

    - name: restart SSHD Service
      service:
        name: sshd
        state: restarted
      when: configsshd.changed
  roles:
    - ansible-docker-spl

- name: Provision an EC2 Instance for SNORT and Cowrie
  hosts: localhost
  connection: local
  gather_facts: False
  tags: ec2-snort, snort
  vars:
    instance_type: t2.micro
    security_group: snort-cowrie
    sec_grp_in:
      - proto: tcp
        from_port: 22
        to_port: 22
        cidr_ip: 0.0.0.0/0
      - proto: tcp
        from_port: 2222
        to_port: 2222
        cidr_ip: 0.0.0.0/0
    image: ami-7c4f7097 # ami-432e2fa8 CIS Amazon Linux Benchmark v2.0.0 - Level 1 - for further testing
    region: eu-central-1
    count: 1
    ec2tag: snort-ids
    inventory_group: snort
  roles:
    - ansible-ec2-instance

- name: Installing Snort and Cowrie
  hosts: snort
  become: true
  remote_user: ec2-user
  tags: snort
  vars:
    rsyslog_remote: "{{ groups['splunk'] }}"
    snort_forwarder: "{{ groups['splunk'] }}"
    cowrie_remote: "{{ groups['splunk'] }}"
    # Output-Plugins
    cowrie_settings:
      output_splunk:
        enabled: true
        url:  http://{{ cowrie_remote | join(" ") }}:8088/services/collector/event
        token: "{{ hec_token }}"
        source: cowrie
        sourcetype: cowrie
  pre_tasks:
    - name: Configure password Authentication
      lineinfile:
        dest: /etc/ssh/sshd_config
        regexp: '^PasswordAuthentication'
        line: 'PasswordAuthentication yes'
      register: configsshd

    - name: restart SSHD Service
      service:
        name: sshd
        state: restarted
      when: configsshd.changed
  roles:
    - ansible-snort
    - ansible-cowried

- name: Provision an EC2 Instance for Badguy
  hosts: localhost
  connection: local
  gather_facts: False
  tags: ec2
  vars:
    instance_type: t2.micro
    security_group: badguy
    image: ami-7c4f7097 # ami-432e2fa8 CIS Amazon Linux Benchmark v2.0.0 - Level 1 - for further testing
    region: eu-central-1
    count: 1
    ec2tag: badguy
    inventory_group: badguy
  roles:
    - ansible-ec2-instance

- name: Rollout Badguy
  hosts: badguy
  become: true
  remote_user: ec2-user
  tags: badguy
  vars:
    rsyslog_remote: "{{ groups['splunk'] }}"
    syslog_gen_service: false
    badguytgt: "{{ groups['snort'] }}"
    badguytgt_port: 2222
    collector_container_name: collectorfordocker
    collector_image: outcoldsolutions/collectorfordocker:3.0.93.180531
  roles:
    - ansible-badguy
    - docker-collector
